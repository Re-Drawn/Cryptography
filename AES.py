rijndaelSBox = [0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, 
                0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, 
                0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, 
                0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, 
                0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, 
                0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, 
                0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, 
                0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, 
                0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, 
                0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, 
                0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, 
                0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, 
                0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, 
                0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, 
                0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, 
                0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]

rijndaelMC = [2,3,1,1,
      1,2,3,1,
      1,1,2,3,
      3,1,1,2]

roundConstants = [[0x01,0x00,0x00,0x00],[0x02,0x00,0x00,0x00],[0x04,0x00,0x00,0x00],[0x08,0x00,0x00,0x00],[0x10,0x00,0x00,0x00],[0x20,0x00,0x00,0x00],[0x40,0x00,0x00,0x00],[0x80,0x00,0x00,0x00],[0x1B,0x00,0x00,0x00],[0x36,0x00,0x00,0x00]]

initial_key = [0x54,0x68,0x61,0x74,0x73,0x20,0x6D,0x79,0x20,0x4B,0x75,0x6E,0x67,0x20,0x46,0x75]

roundNum = 0

def plain_to_hex(plaintext):
    # Converting plaintext to ascii hex values
    hextext = []
    for char in plaintext:
        hextext.append(ord(char))
    return hextext

def add_roundkey(matrix, key):
    # XOR
    for i, byte in enumerate(matrix):
        matrix[i] = int(bin(byte), 2) ^ int(bin(key[i]), 2)
    return matrix

def key_expansion(key):

    global roundNum

    broken_key = [key[0:4],key[4:8],key[8:12],key[12:]]
    k3 = key[12:]
    # Byte shift
    k3[0], k3[1], k3[2], k3[3] = k3[1], k3[2], k3[3], k3[0]
    # Byte sub
    sub_bytes(k3)

    # Round Constant Addition
    for i, byte in enumerate(k3):
        k3[i] = byte ^ roundConstants[roundNum][i]
    
    # Deriving the rest of the new roundkey from k3
    for i, piece in enumerate(broken_key):
        for j, byte in enumerate(piece):
            if i == 0:
                piece[j] = byte ^ k3[j]
            else:
                piece[j] = byte ^ broken_key[i-1][j]
    
    # Join the broken key into a full one
    joined_key = []
    for piece in broken_key:
        for byte in piece:
            joined_key.append(byte)
    
    roundNum = roundNum + 1
    return joined_key
            

def sub_bytes(matrix):
    # Using the look up table to convert each byte
    for i, byte in enumerate(matrix):
        matrix[i] = rijndaelSBox[byte]
    return matrix

def shift_row(matrix):
    # row 1 no shift
    # row 2 one to left
    matrix[1], matrix[5], matrix[9], matrix[13] = matrix[5], matrix[9], matrix[13], matrix[1]
    # row 3 two to left
    matrix[2], matrix[6], matrix[10], matrix[14] = matrix[10], matrix[14], matrix[2], matrix[6]
    # row 4 three to left
    matrix[3], matrix[7], matrix[11], matrix[15] = matrix[15], matrix[3], matrix[7], matrix[11]
    return matrix

def bin_mult(x, y):
    # x^8 + x^4 + x^3 + x + 1
    p = 0b100011011             
    m = 0                       
    for i in range(8):
        m = m << 1
        if m & 0b100000000:
            m = m ^ p
        if y & 0b010000000:
            m = m ^ x
        y = y << 1
    return m

def mix_column(matrix):
    new_matrix = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    for x in range(4):
        for y in range(4):
            total = 0
            for z in range(4):
                total ^= bin_mult(rijndaelMC[z+(4*y)], matrix[z+(x*4)])
            new_matrix[y+x*4] = total
    return new_matrix

def test1():
    print("QUESTION 1")
    # Round number reset to 0
    global roundNum
    roundNum = 0
    plaintext = "Two One Nine Two"
    # Plaintext translated into a hex matrix to be encrypted
    hex_plain = plain_to_hex(plaintext)
    # Initial key
    key_plaintext = "Thats my Kung Fu"
    key = plain_to_hex(key_plaintext)

    # Round 0
    add_roundkey(hex_plain, key)
    key = key

    # Rounds 1-9
    for i in range(9):
        sub_bytes(hex_plain)
        shift_row(hex_plain)
        hex_plain = mix_column(hex_plain)
        key = key_expansion(key)
        add_roundkey(hex_plain, key)
    
    # Round 10 (no mixcolumn)
    sub_bytes(hex_plain)
    shift_row(hex_plain)
    key = key_expansion(key)
    add_roundkey(hex_plain, key)
    # Printing result
    print(f'Plaintext: {plaintext}')
    print(f'Initial Key Plaintext: {key_plaintext}')
    print(f'Ciphertext: {[hex(byte) for byte in hex_plain]}')


def test2():
    print("QUESTION 2")
    global roundNum
    roundNum = 0
    key = [0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f]
    print(f'Round 0 Key:\n {[hex(byte) for byte in key]}')
    # 9 additional rounds of key expansion
    for i in range(1,11,1):
        print(f'Round {i} Key:')
        key = key_expansion(key)
        print([hex(byte) for byte in key])

def main():
    # For Q1
    test1()

    # For Q2
    test2()
    
main()